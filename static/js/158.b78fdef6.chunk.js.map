{"version":3,"file":"static/js/158.b78fdef6.chunk.js","mappings":"uQAOA,IAAMA,EAAU,CACZC,OAAQ,MACRC,QAAS,CACLC,OAAQ,mBACRC,cAAe,+NAIVC,EAAc,WACvB,OAAOC,MACH,+DACAN,EAEP,EAEYO,EAAiB,SAAAC,GAC1B,OAAOF,MAAM,mDAAD,OAC2CE,EAD3C,8CAERR,EAEP,EAEYS,EAAe,SAAAC,GACxB,OAAOJ,MAAM,sCAAD,OAC8BI,EAD9B,mBAERV,EAEP,EAEYW,EAAe,SAAAD,GACxB,OAAOJ,MAAM,sCAAD,OAC8BI,EAD9B,2BAERV,EAEP,EAEYY,EAAkB,SAAAF,GAC3B,OAAOJ,MAAM,sCAAD,OAC8BI,EAD9B,kCAERV,EAEP,C,gJC9CYa,E,OAAYC,GAAAA,IAAH,2G,kBCmEtB,EAhEe,WACb,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAYF,EAAaG,IAAI,SAC7BC,GAAWC,EAAAA,EAAAA,MAEXC,EAAgB,mCAAG,WAAMC,GAAN,mGAEMnB,EAAAA,EAAAA,IAAemB,GAFrB,cAEfC,EAFe,gBAGFA,EAAaC,OAHX,OAGfC,EAHe,OAIrBZ,EAAUY,EAAKC,SAJM,kDAMrBC,QAAQC,IAAR,MANqB,0DAAH,uDAetBC,EAAAA,EAAAA,YAAU,WACJZ,EACFI,EAAiBJ,GAEjBJ,EAAU,GAEb,GAAE,CAACI,IAEJ,IAAMa,EACJlB,EAAOmB,OAAS,GAChBnB,EAAOoB,KAAI,SAAAC,GACT,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaD,EAAM3B,IAAM6B,MAAO,CAAEC,KAAMjB,GAAhD,SACGc,EAAMI,SAFFJ,EAAM3B,GAMlB,IAOH,OACE,SAACG,EAAD,WACE,kBAAM6B,SAhCW,SAAAC,GACnBA,EAAEC,iBACFnB,EAAiBJ,EAClB,EA6BG,WACE,kBACEwB,KAAK,OACLC,MAAOzB,GAAa,GACpB0B,SAXkB,SAACC,GACzB,IAAMC,EAAeD,EAAIE,OAAOJ,MAChC1B,EAAgB,CAAEZ,MAAOyC,GAC1B,KAWK,mBAAQJ,KAAK,SAAb,SAAsB,YACtB,wBACGX,QAKV,C,sBCnED,SAASiB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBZ,EAAQa,EAAKb,KAInB,CAHE,MAAOc,GAEP,YADAN,EAAOM,EAET,CAEID,EAAKE,KACPR,EAAQP,GAERgB,QAAQT,QAAQP,GAAOiB,KAAKR,EAAOC,EAEvC,CAEe,SAASQ,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUT,EAASC,GACpC,IAAIF,EAAMa,EAAGK,MAAMJ,EAAME,GAEzB,SAASb,EAAMT,GACbK,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQV,EAClE,CAEA,SAASU,EAAOe,GACdpB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASe,EACnE,CAEAhB,OAAMiB,EACR,GACF,CACF,C","sources":["components/api/MoviesAPI.jsx","pages/Movies.styled.js","pages/Movies.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["// import axios from 'axios';\n\n// axios.defaults.baseURL = 'https://api.themoviedb.org/3/account/{Daria759}';\n// axios.defaults.params = {\n//     api_key: '588a64147621c3fd4d6888977a9709ec',\n// };\n\nconst options = {\n    method: 'GET',\n    headers: {\n        accept: 'application/json',\n        Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiI1ODhhNjQxNDc2MjFjM2ZkNGQ2ODg4OTc3YTk3MDllYyIsInN1YiI6IjY0Zjc1OWE0ZmZjOWRlMDBlMTMyZTQwZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.V2H9jIDUdqU5vilUneBqZGbhHzj-gr5yql41Uj7BHJA',\n    },\n};\n\nexport const getTrending = () => {\n    return fetch(\n        'https://api.themoviedb.org/3/trending/all/day?language=en-US',\n        options\n    );\n};\n\nexport const getMovieByName = query => {\n    return fetch(\n        `https://api.themoviedb.org/3/search/movie?query=${query}&include_adult=false&language=en-US&page=1`,\n        options\n    );\n};\n\nexport const getMovieById = id => {\n    return fetch(\n        `https://api.themoviedb.org/3/movie/${id}?language=en-US`,\n        options\n    );\n};\n\nexport const getMovieCast = id => {\n    return fetch(\n        `https://api.themoviedb.org/3/movie/${id}/credits?language=en-US`,\n        options\n    );\n};\n\nexport const getMovieReviews = id => {\n    return fetch(\n        `https://api.themoviedb.org/3/movie/${id}/reviews?language=en-US&page=1`,\n        options\n    );\n};\n\n","import styled from \"styled-components\";\n\nexport const Container = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fit, 200px);\n  gap: 16px;\n`;","import { useState, useEffect } from \"react\";\nimport { Link, useSearchParams, useLocation } from \"react-router-dom\";\nimport { Container } from \"./Movies.styled\";\nimport { getMovieByName } from \"components/api/MoviesAPI\";\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const queryText = searchParams.get('query');\n  const location = useLocation();\n\n  const fetchQueryMovies = async movieName => {\n    try {\n      const moviesByName = await getMovieByName(movieName);\n      const data = await moviesByName.json();\n      setMovies(data.results);\n    } catch (error) {\n      console.log(error); \n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    fetchQueryMovies(queryText);\n  };\n\n  useEffect(() => {\n    if (queryText) {\n      fetchQueryMovies(queryText);\n    } else {\n      setMovies([]);\n    }\n  }, [queryText]);\n\n  const moviesMarkup =\n    movies.length > 0 &&\n    movies.map(movie => {\n      return (\n        <li key={movie.id}>\n          <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n            {movie.title}\n          </Link>\n        </li>\n      );\n    });\n\n  const updateQueryString = (evt) => {\n    const movieIdValue = evt.target.value;\n    setSearchParams({ query: movieIdValue });\n  };\n\n  return (\n    <Container>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          value={queryText || ''}\n          onChange={updateQueryString}\n        ></input>\n\n        <button type=\"submit\">Search</button>\n        <ul>\n          {moviesMarkup}\n        </ul>\n      </form>\n    </Container>\n  );\n};\n\nexport default Movies;\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["options","method","headers","accept","Authorization","getTrending","fetch","getMovieByName","query","getMovieById","id","getMovieCast","getMovieReviews","Container","styled","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","queryText","get","location","useLocation","fetchQueryMovies","movieName","moviesByName","json","data","results","console","log","useEffect","moviesMarkup","length","map","movie","to","state","from","title","onSubmit","e","preventDefault","type","value","onChange","evt","movieIdValue","target","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}